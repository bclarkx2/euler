#! /usr/bin/env python3

###############################################################################
# Imports                                                                     #
###############################################################################

import argparse


###############################################################################
# Constants                                                                   #
###############################################################################

N = 20


###############################################################################
# Problem                                                                     #
###############################################################################

cache = {}


def cached(x, y):
    if (x, y) not in cache:
        cache[(x, y)] = paths(x, y)
    return cache[(x, y)]


def paths(x, y):

    if (x, y) == (1, 1):
        return 2
    elif x == 1:
        return 1 + cached(x, y - 1)
    elif y == 1:
        return 1 + cached(x - 1, y)
    else:
        return cached(x - 1, y) + \
            cached(x, y - 1)


###############################################################################
# Helper functions                                                            #
###############################################################################

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--n",
                        type=int,
                        default=N)
    return parser.parse_args()


###############################################################################
# Main script                                                                 #
###############################################################################

def main():

    args = get_args()

    print(paths(args.n, args.n))


if __name__ == '__main__':
    main()
